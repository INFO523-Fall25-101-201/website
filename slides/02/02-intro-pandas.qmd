---
title: Introduction to Data
subtitle: Data Mining and Discovery
title-slide-attributes:
  data-background-image: ../minedata-bg.png
  data-background-size: 600px, cover
  data-slide-number: none
format: revealjs
auto-stretch: false
---

# Introduction to {style="text-align: center;"}

![](images/pandas.png){fig-align="center" width="618"}

## What is Pandas?

::: incremental
-   **High-Performance Library**: Pandas is a Python library for fast data manipulation.

-   **Core Structures**: It introduces DataFrame and Series for data handling.

-   **Data Processing**: Ideal for cleaning and analyzing datasets.

-   **Versatile I/O**: Offers extensive file format compatibility for data I/O.
:::

## Why Pandas for data mining?

::: incremental
-   **Streamlines Data Prep**: Optimizes data manipulation for mining readiness.

-   **Built-in Analysis**: Includes essential tools for quick data exploration.

-   **Handles Large Data**: Efficiently processes and analyzes big datasets.
:::

# Pandas data structures

## Series

One-dimensional array-like object containing a sequence of values with an associated array of labels, its index.

```{python}
import pandas as pd

# Creating a Series
ser = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c'])

# Accessing elements
print("a:", ser['a'])
```

## DataFrame

A rectangular table of data with an ordered collection of columns

```{python}
# Creating a DataFrame
data = {
    'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada'],
    'year': [2000, 2001, 2002, 2001, 2002],
    'pop': [1.5, 1.7, 3.6, 2.4, 2.9]
}
frame = pd.DataFrame(data)

# Selecting columns
print(frame['state'])
```

## Index objects

Immutable, can't be modified by a user

```{python}
# Index objects
obj = pd.Series(range(3), index=['a', 'b', 'c'])
index = obj.index

print(index)
```

## Case study: average rent costs

![](images/rent.jpeg){fig-align="center"}

### ðŸ’°ðŸ“ˆ {style="text-align: center;"}

::: aside
Source: [Zillow Public Access Data](https://www.zillow.com/research/data/)
:::

# Reading & Inspecting Data

## **First, why .CSVs?**

::: incremental
-   More reproducible - can see changes on GitHub

-   Simple file structure

-   Standardized

-   Non-proprietary (e.g., Excel)
:::

## Reading in .CSV files {.smaller}

```{python}
# Loading data from CSV
df = pd.read_csv('data/rent_avg.csv')

df
```

## Inspecting data {.smaller}

**Any issues?**

::: panel-tabset
## Head

```{python}
df.head()
```

## Tail

```{python}
df.tail()
```

## Data types

```{python}
df.dtypes
```

## Describe

```{python}
df.describe()
```

## Stats

We can also extract specific summary stats

```{python}
min_value = df['11/30/23'].min()
max_value = df['11/30/23'].max()
mean_value = df['11/30/23'].mean()
med_value = df['11/30/23'].median()
std_value = df['11/30/23'].std()
count_value = df['11/30/23'].count()
```

```{python}
#| echo: false
print("min:", min_value)
print("max:", max_value)
print("mean:", mean_value)
print("median:", med_value)
print("st. dev:", std_value)
print("N:", count_value)
```

## Unique values

```{python}
pd.unique(df['StateName'])
```
:::

## Melting {.smaller}

Jumping ahead slightly...

```{python}
df2 = df.melt(id_vars = df.columns[0:5], var_name = "date", value_name = "avg_price")
df2.head()
```

## Convert to datetime {.smaller}

```{python}
df2['date'] = pd.to_datetime(df2['date'])
df2.head()
```

# Groups

## Group data {.smaller}

```{python}
grouped_df = df2.groupby('StateName')
```

## Grouped statistics {.smaller}

::: panel-tabset
## Describe

```{python}
# Summary statistics for all numeric columns by sex
grouped_df.describe()
```

## Single stat

```{python}
# Provide the mean for each numeric column by sex
grouped_df.mean(numeric_only = True)
```
:::

# More wrangling next time!
