{
  "hash": "5ed416ed43c25b664e3abfdab6291288",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Introduction to Data Mining\nsubtitle: Lecture 1\nauthor: \"{{< var slides.author >}}\"\ninstitute: \"{{< var slides.institute >}}\"\nfooter: \"{{< var slides.footer >}}\"\ntitle-slide-attributes:\n  data-background-image: ../minedata-bg.png\n  data-background-size: 600px, cover\n  data-slide-number: none\nformat: revealjs\nauto-stretch: false\n---\n\n# Warm up\n\n## Announcements\n\n-   Reading Quiz #1 is due Friday, Jan 19th, 11:59pm\n\n-   Project 1 overview next week\n\n    -   Teams will be announced as well\n\n## What is data mining?\n\nOne of many definitions:\n\n> \"Data mining is the science of extracting useful knowledge from huge data repositories.\" - ACM SIGKDD, [Data Mining Curriculum: A Proposal](http://www.kdd.org/curriculum)\n\n## What is data mining?\n\n**Convergence of several fields**\n\n::: incremental\n-   Statistics\n\n-   Computer science (machine learning, AI)\n\n-   Data science\n\n-   Optimization\n:::\n\n## Why data mining?<br>Commercial viewpoint {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n::: fragment\n**Businesses collect + store tons of data**\n\n::: incremental\n-   Purchases at department/grocery stores\n-   Bank/credit card transactions\n-   Web and social media data\n-   Mobile and IOT\n:::\n:::\n\n::: fragment\n**Computers are cheaper + more powerful**\n:::\n\n::: fragment\n**Competition to provide better services**\n\n::: incremental\n-   Mass customization and recommendation systems\n-   Targeted advertising\n-   Improved logistics\n:::\n:::\n:::\n\n::: {.column width=\"50%\"}\n![](images/commercial1.png){fig-align=\"center\" width=\"201\"}\n\n![](images/socialmed.png){fig-align=\"center\" width=\"247\"}\n\n![](images/iot.png){fig-align=\"center\" width=\"354\"}\n:::\n:::\n\n## Knowledge discovery in databases (KDD) {.smaller}\n\n![](images/dm-wf.png){fig-align=\"center\" width=\"1712\"}\n\n::: aside\nUsama M. Fayyad et al., 1996.\n:::\n\n## Data mining tasks\n\n::: fragment\n#### Descriptive\n\n::: incremental\nFind human-interpretable patterns that describes the data\n:::\n:::\n\n<br>\n\n::: fragment\n#### Predictive Methods\n\n::: incremental\nUse features to predict unknown or future values of another feature\n:::\n:::\n\n## Predictive modeling {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n#### Classification\n\n::: {#1c8320db .cell execution_count=1}\n\n::: {.cell-output .cell-output-display}\n![](01-intro-datamine-numpy_files/figure-revealjs/cell-2-output-1.png){width=456 height=302}\n:::\n:::\n\n\n::: {#10fa5241 .cell execution_count=2}\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Budget</th>\n      <th>Duration</th>\n      <th>Channel</th>\n      <th>Target_Audience_Size</th>\n      <th>Season</th>\n      <th>Campaign_Success</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.170199</td>\n      <td>-1.110199</td>\n      <td>1</td>\n      <td>-0.910081</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.198680</td>\n      <td>1.499221</td>\n      <td>0</td>\n      <td>0.988123</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.695723</td>\n      <td>0.126734</td>\n      <td>0</td>\n      <td>0.222349</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-0.531455</td>\n      <td>-0.169270</td>\n      <td>1</td>\n      <td>-2.224787</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.194052</td>\n      <td>-2.479343</td>\n      <td>0</td>\n      <td>1.518522</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n#### Regression\n\n::: {#00b91a77 .cell execution_count=3}\n\n::: {.cell-output .cell-output-display}\n![](01-intro-datamine-numpy_files/figure-revealjs/cell-4-output-1.png){width=489 height=302}\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Feature</th>\n      <th>Target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.931280</td>\n      <td>50.779929</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.087047</td>\n      <td>-10.065270</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-1.057711</td>\n      <td>-34.918392</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.314247</td>\n      <td>10.526743</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>-0.479174</td>\n      <td>-17.738377</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n:::\n\n## Classification {.smaller}\n\nFind a **model** for the class attribute as a function of the other attributes\n\n**Goal**: assign new records to a class as accurately as possible.\n\nE.g., Customer Attrition, Directed Marketing\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {#189f1738 .cell execution_count=4}\n\n::: {.cell-output .cell-output-display}\n![](01-intro-datamine-numpy_files/figure-revealjs/cell-5-output-1.png){width=456 height=449}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#a0dc79f4 .cell execution_count=5}\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Budget</th>\n      <th>Duration</th>\n      <th>Channel</th>\n      <th>Target_Audience_Size</th>\n      <th>Season</th>\n      <th>Campaign_Success</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.170199</td>\n      <td>-1.110199</td>\n      <td>1</td>\n      <td>-0.910081</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.198680</td>\n      <td>1.499221</td>\n      <td>0</td>\n      <td>0.988123</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.695723</td>\n      <td>0.126734</td>\n      <td>0</td>\n      <td>0.222349</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-0.531455</td>\n      <td>-0.169270</td>\n      <td>1</td>\n      <td>-2.224787</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.194052</td>\n      <td>-2.479343</td>\n      <td>0</td>\n      <td>1.518522</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1.807197</td>\n      <td>1.341938</td>\n      <td>1</td>\n      <td>-0.667830</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>-0.093387</td>\n      <td>-2.407374</td>\n      <td>0</td>\n      <td>-0.480568</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>1.063941</td>\n      <td>0.864310</td>\n      <td>1</td>\n      <td>-0.957300</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>-1.433152</td>\n      <td>1.360601</td>\n      <td>1</td>\n      <td>1.384636</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>-0.937926</td>\n      <td>0.464292</td>\n      <td>1</td>\n      <td>-2.113015</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n:::\n\n## Regression {.smaller}\n\nFind a **model** that predicts a variable (Y) from another variable (X)\n\nBoth are continuous variables (floats)\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {#0397d5a3 .cell execution_count=6}\n\n::: {.cell-output .cell-output-display}\n![](01-intro-datamine-numpy_files/figure-revealjs/cell-7-output-1.png){width=530 height=523}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#f7ede38f .cell execution_count=7}\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Feature</th>\n      <th>Target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.931280</td>\n      <td>50.779929</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.087047</td>\n      <td>-10.065270</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-1.057711</td>\n      <td>-34.918392</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.314247</td>\n      <td>10.526743</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>-0.479174</td>\n      <td>-17.738377</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.647689</td>\n      <td>31.564596</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>-0.463418</td>\n      <td>-30.068883</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0.542560</td>\n      <td>5.912007</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0.611676</td>\n      <td>23.473374</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1.003533</td>\n      <td>32.343595</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n:::\n\n## Association mining\n\nGiven a set of transactions, produce rules of association\n\n::: {#c6fc9e37 .cell execution_count=8}\n\n::: {.cell-output .cell-output-stdout}\n```\n  antecedents consequents  antecedent support  consequent support  support  \\\n0   (Diapers)      (Beer)                 0.8                 0.6      0.6   \n1      (Beer)   (Diapers)                 0.6                 0.8      0.6   \n2   (Diapers)     (Bread)                 0.8                 0.8      0.6   \n3     (Bread)   (Diapers)                 0.8                 0.8      0.6   \n4      (Milk)     (Bread)                 0.8                 0.8      0.6   \n5     (Bread)      (Milk)                 0.8                 0.8      0.6   \n6      (Milk)   (Diapers)                 0.8                 0.8      0.6   \n7   (Diapers)      (Milk)                 0.8                 0.8      0.6   \n\n   confidence    lift  representativity  leverage  conviction  zhangs_metric  \\\n0        0.75  1.2500               1.0      0.12         1.6           1.00   \n1        1.00  1.2500               1.0      0.12         inf           0.50   \n2        0.75  0.9375               1.0     -0.04         0.8          -0.25   \n3        0.75  0.9375               1.0     -0.04         0.8          -0.25   \n4        0.75  0.9375               1.0     -0.04         0.8          -0.25   \n5        0.75  0.9375               1.0     -0.04         0.8          -0.25   \n6        0.75  0.9375               1.0     -0.04         0.8          -0.25   \n7        0.75  0.9375               1.0     -0.04         0.8          -0.25   \n\n   jaccard  certainty  kulczynski  \n0     0.75      0.375       0.875  \n1     0.75      1.000       0.875  \n2     0.60     -0.250       0.750  \n3     0.60     -0.250       0.750  \n4     0.60     -0.250       0.750  \n5     0.60     -0.250       0.750  \n6     0.60     -0.250       0.750  \n7     0.60     -0.250       0.750  \n```\n:::\n:::\n\n\n## Association mining {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n::: incremental\n-   Let the rule discovered be: `{Potato Chips, …} → {Soft drink}`\n\n-   **Soft drink as RHS**: what can boost sales? Discount Potato Chips?\n\n-   **Potato Chips as LHS**: which products are affected if Potato Chips are discontinued\n\n-   **Potato Chips in LHS** and Soft drink in RHS: What products should be sold with Potato Chips to promote sales of Soft drinks!\n:::\n:::\n\n::: {.column width=\"50%\"}\n![](images/shopping.webp){fig-align=\"center\" width=\"500\"}\n:::\n:::\n\n## Association mining goals {.smaller}\n\n![](images/repairs.png){fig-align=\"center\"}\n\n::: incremental\n-   **Goal**: Anticipate the nature of repairs to keep the service vehicles equipped with right parts to speed up repair time.\n-   **Approach**: Process the data on tools and parts required in previous repairs at different consumer locations and discover co-occurrence patterns.\n:::\n\n## Clustering\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {#256d3eb6 .cell execution_count=9}\n\n::: {.cell-output .cell-output-display}\n![](01-intro-datamine-numpy_files/figure-revealjs/cell-10-output-1.png){width=502 height=523}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n::: incremental\n-   Group points that are similar to one another\n\n-   Separate dissimilar points\n\n-   Groups are not known → Unsupervised Learning\n\n-   E.g., Market Segmentation, Document Types\n:::\n:::\n:::\n\n## Anomaly detection\n\nDetect significant deviations from normal behavior.\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {#74e3c2dd .cell execution_count=10}\n\n::: {.cell-output .cell-output-display}\n![](01-intro-datamine-numpy_files/figure-revealjs/cell-11-output-1.png){width=526 height=523}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n![](images/credit-cards.jpeg){fig-align=\"center\" width=\"242\"}\n\n![](images/ips.jpeg){fig-align=\"center\" width=\"400\"}\n:::\n:::\n\n## Other data mining tasks\n\n![](images/others.png){fig-align=\"center\"}\n\n## Challenges of data mining\n\n![](images/challenges.png){fig-align=\"center\"}\n\n## Legal, privacy, and security issues\n\n**Problem**: Internet is global, legislation is local!\n\n![](images/ethics.png){fig-align=\"center\"}\n\n## Legal, privacy, and security issues {.smaller}\n\n![](images/angry-birds.png){fig-align=\"center\" width=\"1925\"}\n\n::: incremental\n-   **Top Mobile App**: Angry Birds is the highest-selling paid app on iPhone in the US and Europe.\n\n-   **Downloads**: Surpassed a billion downloads globally.\n\n-   **Player Engagement**: Users often engage for hours playing the game.\n\n-   **Privacy Concerns**: A study by Jason Hong of Carnegie Mellon University found that out of 40 users, 38 were unaware that their location data was being stored.\n\n-   **Ad Targeting**: The location data was used for targeting ads to the users.\n:::\n\n## Legal, privacy, and security issues {.smaller}\n\n![](images/pokemon-go.png){fig-align=\"center\" width=\"683\"}\n\n::: incremental\n-   **Location & Camera Access**: Pokémon Go tracks location and requires camera access.\n\n-   **Data Collection Potential**: Its popularity may lead to significant data gathering.\n\n-   **Privacy Policy Issues**: Criticized for being deliberately vague.\n\n-   **User Data as Asset**: User data classified as a business asset in the privacy agreement.\n\n-   **Data Transfer Clause**: User data can be transferred if Niantic is sold.\n:::\n\n## Conclusions\n\n::: columns\n::: {.column width=\"50%\"}\n**Data Mining is interdisciplinary**\n\n::: incremental\n-   Statistics\n\n-   CS (machine learning, AI)\n\n-   Data science\n\n-   Optimization\n:::\n:::\n\n::: {.column width=\"50%\"}\n**Data mining is a team effort**\n\n::: incremental\n-   Data management\n\n-   Statistics\n\n-   Programming\n\n-   Communication\n\n-   Application domain\n:::\n:::\n:::\n\n# Intro to NumPy {style=\"text-align: center;\"}\n\n![](images/numpy.png){fig-align=\"center\" width=\"300\"}\n\n## What is NumPy?\n\n::: incremental\n-   NumPy = Numerical Python\n\n-   Foundational package for scientific computing\n\n-   High-performance multidimensional arrays\n\n-   Tools for working with arrays\n:::\n\n::: fragment\n**Start with**\n\n```{bash}\npip install numpy\n```\n:::\n\n## Why NumPy for data mining?\n\n::: incremental\n-   Essential for data processing, manipulation, and analysis.\n\n-   Underpins advanced data mining algorithms implemented in Python.\n\n-   Fast and memory-efficient with powerful data structures.\n:::\n\n# NumPy Arrays\n\n## Creating arrays\n\n::: panel-tabset\n## Code\n\n::: {#d4d5b5e0 .cell execution_count=11}\n``` {.python .cell-code}\nimport numpy as np\n\n# Creating a simple NumPy array\narr = np.array([1, 2, 3, 4])\n\n# Multidimensional array\nmulti_arr = np.array([[1, 2, 3], [4, 5, 6]])\n\n# Range of values\nrange_arr = np.arange(10)\n\n# Array of zeros\nzeros_arr = np.zeros((3, 3))\n\n# Array of ones\nones_arr = np.ones((2, 2))\n\n# Identity matrix\nidentity_matrix = np.eye(3)\n```\n:::\n\n\n## Output\n\n::: {#6ef2f547 .cell execution_count=12}\n\n::: {.cell-output .cell-output-stdout}\n```\narr: [1 2 3 4] \n\nmulti_arr: [[1 2 3]\n [4 5 6]] \n\nrange_arr: [0 1 2 3 4 5 6 7 8 9] \n\nzeros_arr: [[0. 0. 0.]\n [0. 0. 0.]\n [0. 0. 0.]] \n\nones_arr: [[1. 1.]\n [1. 1.]] \n\nidentity_matrix: [[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\n```\n:::\n:::\n\n\n:::\n\n## Array attributes\n\n::: {#33aa2afb .cell execution_count=13}\n``` {.python .cell-code}\n# Array dimensions\nprint(\"Dimensions:\", multi_arr.ndim)\n\n# Shape of array\nprint(\"Shape:\", multi_arr.shape)\n\n# Size of array\nprint(\"Size:\", multi_arr.size)\n\n# Data type of array elements\nprint(\"Data Type:\", multi_arr.dtype)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDimensions: 2\nShape: (2, 3)\nSize: 6\nData Type: int64\n```\n:::\n:::\n\n\n# Array operations\n\n## Arithmetic operations\n\n::: {#5e759435 .cell execution_count=14}\n``` {.python .cell-code}\n# Element-wise addition\naddition = arr + 2\n\n# Element-wise subtraction\nsubtraction = arr - 2\n\n# Element-wise multiplication\nmultiplication = arr * 2\n\n# Element-wise division\ndivision = arr / 2\n```\n:::\n\n\n::: {#438230e2 .cell execution_count=15}\n\n::: {.cell-output .cell-output-stdout}\n```\naddition: [3 4 5 6] \n\nsubtraction: [-1  0  1  2] \n\nmultiplication: [2 4 6 8] \n\ndivision: [0.5 1.  1.5 2. ] \n\n```\n:::\n:::\n\n\n## Aside\n\nWhy do my outputs look than different than Python?\n\n::: panel-tabset\n## Python\n\n::: {#828fd249 .cell execution_count=16}\n``` {.python .cell-code}\nprint(addition)\nprint(subtraction)\nprint(multiplication)\nprint(division)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[3 4 5 6]\n[-1  0  1  2]\n[2 4 6 8]\n[0.5 1.  1.5 2. ]\n```\n:::\n:::\n\n\n## My slides\n\n::: {#aed50587 .cell execution_count=17}\n``` {.python .cell-code}\nprint(\"addition:\", addition, \"\\n\")\n\nprint(\"subtraction:\", subtraction, \"\\n\")\n\nprint(\"multiplication:\", multiplication, \"\\n\")\n\nprint(\"division:\", division, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\naddition: [3 4 5 6] \n\nsubtraction: [-1  0  1  2] \n\nmultiplication: [2 4 6 8] \n\ndivision: [0.5 1.  1.5 2. ] \n\n```\n:::\n:::\n\n\n:::\n\n## Statistical operations\n\n::: {#e1b8e488 .cell execution_count=18}\n``` {.python .cell-code}\n# Sum of elements\ntotal = arr.sum()\n\n# Mean of elements\nmean_value = arr.mean()\n\n# Standard deviation\nstd_dev = arr.std()\n\n# Correlation coefficient\ncorr = np.corrcoef(multi_arr)\n```\n:::\n\n\n::: {#12079a0c .cell execution_count=19}\n\n::: {.cell-output .cell-output-stdout}\n```\ntotal: 10 \n\nmean_value: 2.5 \n\nstd_dev: 1.118033988749895 \n\ncorr: [[1. 1.]\n [1. 1.]] \n\n```\n:::\n:::\n\n\n# Advanced operations\n\n## Reshaping and transposing\n\n::: {#381f70ca .cell execution_count=20}\n``` {.python .cell-code}\n# Reshaping an array\nreshaped = np.reshape(range_arr, (2, 5))\n\n# Transpose of an array\ntransposed = multi_arr.T\n```\n:::\n\n\n::: {#f850d4f2 .cell execution_count=21}\n\n::: {.cell-output .cell-output-stdout}\n```\nrange_arr: [0 1 2 3 4 5 6 7 8 9] \n\nreshaped: [[0 1 2 3 4]\n [5 6 7 8 9]] \n\nmulti_arr: [[1 2 3]\n [4 5 6]] \n\ntransposed: [[1 4]\n [2 5]\n [3 6]] \n\n```\n:::\n:::\n\n\n## Indexing and slicing\n\n::: {#76870320 .cell execution_count=22}\n``` {.python .cell-code}\n# Accessing a specific element\nelement = multi_arr[0, 1]\n\n# Slicing a row\nrow = multi_arr[1, :]\n\n# Slicing a column\ncolumn = multi_arr[:, 2]\n```\n:::\n\n\n::: {#16dcc282 .cell execution_count=23}\n\n::: {.cell-output .cell-output-stdout}\n```\nmulti_arr: [[1 2 3]\n [4 5 6]] \n\nrow: [4 5 6] \n\ncolumn: [3 6] \n\n```\n:::\n:::\n\n\n## Broadcasting\n\n::: {#4939cabd .cell execution_count=24}\n``` {.python .cell-code}\n# Broadcasting allows arithmetic operations on arrays of different sizes\nbroadcasted_addition = multi_arr + np.array([1, 0, 1])\n```\n:::\n\n\n::: {#95ef17a4 .cell execution_count=25}\n\n::: {.cell-output .cell-output-stdout}\n```\nmulti_arr: [[1 2 3]\n [4 5 6]] \n\nbroadcasted_addition: [[2 2 4]\n [5 5 7]] \n\n```\n:::\n:::\n\n\n# Linear algebra in NumPy\n\n## Matrix operations\n\n**Dot product**: take two equal-length sequences and return a single number\n\n`2 • (1, 2, 3) = 2x1 = 2; 2x2 = 0; 2x3 = 6`\n\n**Matrix multiplication**:\n\n`(1, 2, 3) • (7, 9, 11) = (1×7 + 2×9 + 3×11) = 58`\n\n::: {#67aea2c9 .cell execution_count=26}\n``` {.python .cell-code}\n# Dot product\ndot_product = np.dot(arr, arr)\n\n# Matrix multiplication\nmatrix_mul = np.dot(multi_arr, identity_matrix)\n```\n:::\n\n\n::: {#a4933e75 .cell execution_count=27}\n\n::: {.cell-output .cell-output-stdout}\n```\ndot_product: 30 \n\nmatrix_mul: [[1. 2. 3.]\n [4. 5. 6.]] \n\n```\n:::\n:::\n\n\n## Eigenvalues and Eigenvectors\n\n::: {#d1c54620 .cell execution_count=28}\n``` {.python .cell-code}\n# Eigenvalues and eigenvectors\neigenvalues, eigenvectors = np.linalg.eig(identity_matrix)\n```\n:::\n\n\n::: {#b820799c .cell execution_count=29}\n\n::: {.cell-output .cell-output-stdout}\n```\neigenvalues: [1. 1. 1.] \n\neigenvectors: [[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]] \n\n```\n:::\n:::\n\n\n## NumPy for data mining\n\n::: fragment\n**Application in Algorithms**\n\n-   NumPy arrays are used in various data mining algorithms like clustering, classification, and neural networks.\n:::\n\n::: fragment\n**Performance**\n\n-   NumPy operations are implemented in C, which makes them much faster than standard Python.\n:::\n\n## Conclusion\n\n::: incremental\n-   NumPy is integral to data mining and analysis in Python.\n\n-   It provides efficient and fast operations for array and matrix manipulation.\n\n-   Understanding NumPy is crucial for implementing and customizing data mining algorithms.\n:::\n\n",
    "supporting": [
      "01-intro-datamine-numpy_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}