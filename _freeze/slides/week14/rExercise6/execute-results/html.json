{
  "hash": "7076fb98b7d9a0d4f7c81681c0c960d0",
  "result": {
    "markdown": "---\ntitle: \"Modeling time series with tidy resampling\"\n---\n\n\n\n\n## Introduction\n\n\"[Demo Week: Tidy Forecasting with sweep](https://www.business-science.io/code-tools/2017/10/25/demo_week_sweep.html)\" is an excellent article that uses tidy methods with time series. This article uses their analysis with rsample to find performance estimates for future observations using [rolling forecast origin resampling](https://robjhyndman.com/hyndsight/crossvalidation/).\n\n## Example data\n\nThe data for this article are sales of alcoholic beverages originally from [the Federal Reserve Bank of St. Louis website](https://fred.stlouisfed.org/series/S4248SM144NCEN).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nlibrary(modeldata)\ndata(\"drinks\")\nglimpse(drinks)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 309\nColumns: 2\n$ date           <date> 1992-01-01, 1992-02-01, 1992-03-01, 1992-04-01, 1992-0…\n$ S4248SM144NCEN <dbl> 3459, 3458, 4002, 4564, 4221, 4529, 4466, 4137, 4126, 4…\n```\n:::\n:::\n\n\nEach row represents one month of sales (in millions of US dollars).\n\n## Time series resampling\n\nSuppose that we need predictions for one year ahead and our model should use the most recent data from the last 20 years. To set up this resampling scheme:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroll_rs <- rolling_origin(\n  drinks, \n  initial = 12 * 20, \n  assess = 12,\n  cumulative = FALSE\n  )\n\nnrow(roll_rs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 58\n```\n:::\n\n```{.r .cell-code}\nroll_rs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Rolling origin forecast resampling \n# A tibble: 58 × 2\n   splits           id     \n   <list>           <chr>  \n 1 <split [240/12]> Slice01\n 2 <split [240/12]> Slice02\n 3 <split [240/12]> Slice03\n 4 <split [240/12]> Slice04\n 5 <split [240/12]> Slice05\n 6 <split [240/12]> Slice06\n 7 <split [240/12]> Slice07\n 8 <split [240/12]> Slice08\n 9 <split [240/12]> Slice09\n10 <split [240/12]> Slice10\n# ℹ 48 more rows\n```\n:::\n:::\n\n\nEach `split` element contains the information about that resample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroll_rs$splits[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<Analysis/Assess/Total>\n<240/12/309>\n```\n:::\n:::\n\n\nFor plotting, let's index each split by the first day of the assessment set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_date <- function(x) {\n  min(assessment(x)$date)\n}\n\nstart_date <- map(roll_rs$splits, get_date)\nroll_rs$start_date <- do.call(\"c\", start_date)\nhead(roll_rs$start_date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2012-01-01\" \"2012-02-01\" \"2012-03-01\" \"2012-04-01\" \"2012-05-01\"\n[6] \"2012-06-01\"\n```\n:::\n:::\n\n\nThis resampling scheme has 58 splits of the data so that there will be 58 ARIMA models that are fit. To create the models, we use the `auto.arima()` function from the forecast package. The rsample functions `analysis()` and `assessment()` return a data frame, so another step converts the data to a `ts` object called `mod_dat` using a function in the timetk package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(forecast)  # for `auto.arima`\nlibrary(timetk)    # for `tk_ts`\nlibrary(zoo)       # for `as.yearmon`\n\nfit_model <- function(x, ...) {\n  # suggested by Matt Dancho:\n  x %>%\n    analysis() %>%\n    # Since the first day changes over resamples, adjust it\n    # based on the first date value in the data frame \n    tk_ts(start = .$date[[1]] %>% as.yearmon(), \n          frequency = 12, \n          silent = TRUE) %>%\n    auto.arima(...)\n}\n```\n:::\n\n\nSave each model in a new column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroll_rs$arima <- map(roll_rs$splits, fit_model)\n\n# For example:\nroll_rs$arima[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSeries: . \nARIMA(4,1,1)(0,1,2)[12] \n\nCoefficients:\n          ar1      ar2     ar3      ar4      ma1    sma1     sma2\n      -0.1852  -0.0238  0.3577  -0.1517  -0.8311  -0.193  -0.3244\ns.e.   0.1466   0.1656  0.1440   0.0809   0.1377   0.067   0.0640\n\nsigma^2 = 72198:  log likelihood = -1591.15\nAIC=3198.3   AICc=3198.97   BIC=3225.7\n```\n:::\n:::\n\n\n(There are some warnings produced by these regarding extra columns in the data that can be ignored.)\n\n## Model performance\n\nUsing the model fits, let's measure performance in two ways:\n\n-   *Interpolation* error will measure how well the model fits to the data that were used to create the model. This is most likely optimistic since no holdout method is used.\n-   *Extrapolation* or *forecast* error evaluates the performance of the model on the data from the following year (that were not used in the model fit).\n\nIn each case, the mean absolute percent error (MAPE) is the statistic used to characterize the model fits. The interpolation error can be computed from the `Arima` object. To make things easy, let's use the sweep package's `sw_glance()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sweep)\n\nroll_rs$interpolation <- map_dbl(\n  roll_rs$arima,\n  function(x) \n    sw_glance(x)[[\"MAPE\"]]\n  )\n\nsummary(roll_rs$interpolation)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.841   2.921   2.950   2.947   2.969   3.135 \n```\n:::\n:::\n\n\nFor the extrapolation error, the model and split objects are required. Using these:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_extrap <- function(split, mod) {\n  n <- nrow(assessment(split))\n  # Get assessment data\n  pred_dat <- assessment(split) %>%\n    mutate(\n      pred = as.vector(forecast(mod, h = n)$mean),\n      pct_error = ( S4248SM144NCEN - pred ) / S4248SM144NCEN * 100\n    )\n  mean(abs(pred_dat$pct_error))\n}\n\nroll_rs$extrapolation <- \n  map2_dbl(roll_rs$splits, roll_rs$arima, get_extrap)\n\nsummary(roll_rs$extrapolation)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.371   3.231   3.629   3.654   4.113   5.453 \n```\n:::\n:::\n\n\nWhat do these error estimates look like over time?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroll_rs %>%\n  select(interpolation, extrapolation, start_date) %>%\n  pivot_longer(cols = matches(\"ation\"), names_to = \"error\", values_to = \"MAPE\") %>%\n  ggplot(aes(x = start_date, y = MAPE, col = error)) + \n  geom_point() + \n  geom_line()\n```\n\n::: {.cell-output-display}\n![](rExercise6_files/figure-revealjs/plot-1.png){width=960}\n:::\n:::\n\n\nIt is likely that the interpolation error is an underestimate to some degree, as mentioned above.\n\nIt is also worth noting that `rolling_origin()` can be used over calendar periods, rather than just over a fixed window size. This is especially useful for irregular series where a fixed window size might not make sense because of missing data points, or because of calendar features like different months having a different number of days.\n\nThe example below demonstrates this idea by splitting `drinks` into a nested set of 26 years, and rolling over years rather than months. Note that the end result accomplishes a different task than the original example; in this new case, each slice moves forward an entire year, rather than just one month.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# The idea is to nest by the period to roll over,\n# which in this case is the year.\nroll_rs_annual <- drinks %>%\n  mutate(year = as.POSIXlt(date)$year + 1900) %>%\n  nest(data = c(date, S4248SM144NCEN)) %>%\n  rolling_origin(\n    initial = 20, \n    assess = 1, \n    cumulative = FALSE\n  )\n\nanalysis(roll_rs_annual$splits[[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 2\n    year data             \n   <dbl> <list>           \n 1  1992 <tibble [12 × 2]>\n 2  1993 <tibble [12 × 2]>\n 3  1994 <tibble [12 × 2]>\n 4  1995 <tibble [12 × 2]>\n 5  1996 <tibble [12 × 2]>\n 6  1997 <tibble [12 × 2]>\n 7  1998 <tibble [12 × 2]>\n 8  1999 <tibble [12 × 2]>\n 9  2000 <tibble [12 × 2]>\n10  2001 <tibble [12 × 2]>\n11  2002 <tibble [12 × 2]>\n12  2003 <tibble [12 × 2]>\n13  2004 <tibble [12 × 2]>\n14  2005 <tibble [12 × 2]>\n15  2006 <tibble [12 × 2]>\n16  2007 <tibble [12 × 2]>\n17  2008 <tibble [12 × 2]>\n18  2009 <tibble [12 × 2]>\n19  2010 <tibble [12 × 2]>\n20  2011 <tibble [12 × 2]>\n```\n:::\n:::\n\n\nThe workflow to access these calendar slices is to use `bind_rows()` to join each analysis set together.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(\n  roll_rs_annual,\n  extracted_slice = map(splits, ~ bind_rows(analysis(.x)$data))\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Rolling origin forecast resampling \n# A tibble: 6 × 3\n  splits         id     extracted_slice   \n  <list>         <chr>  <list>            \n1 <split [20/1]> Slice1 <tibble [240 × 2]>\n2 <split [20/1]> Slice2 <tibble [240 × 2]>\n3 <split [20/1]> Slice3 <tibble [240 × 2]>\n4 <split [20/1]> Slice4 <tibble [240 × 2]>\n5 <split [20/1]> Slice5 <tibble [240 × 2]>\n6 <split [20/1]> Slice6 <tibble [240 × 2]>\n```\n:::\n:::\n",
    "supporting": [
      "rExercise6_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}