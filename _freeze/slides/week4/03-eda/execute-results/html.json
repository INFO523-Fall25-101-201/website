{
  "hash": "53f0ef7539e38b10c03cf998c8980a80",
  "result": {
    "markdown": "---\ntitle: Exploratory Data Analysis + Data Visualization\nsubtitle: Lecture 3\ntitle-slide-attributes:\n  data-background-image: ../minedata-bg.png\n  data-background-size: 600px, cover\n  data-slide-number: none\nformat: revealjs\nauto-stretch: false\n---\n\n# Warm up\n\n## Announcements\n\n-   HW 01 is due tonight, 11:59pm\n\n-   RQ #2 is due Feb 07, 11:59pm\n\n-   Project 01 peer-review is Feb 07, first round proposals are due before class\n\n## Setup\n\n::: {#setup .cell execution_count=1}\n``` {.python .cell-code}\n# Import all required libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nfrom scipy.stats import skewnorm\nfrom scipy.stats import kurtosis, norm\nfrom scipy.stats import gamma\nimport missingno as msno\nimport random\nimport statsmodels.api as sm\n\n# Increase font size of all Seaborn plot elements\nsns.set(font_scale = 1.25)\n\n# Load in UK Smoking Data\nbirths14 = pd.read_csv(\"data/births14.csv\")\n\n# Set seed\nrandom.seed(123)\n```\n:::\n\n\n# Exploratory Data Analysis\n\n## What is exploratory data analysis? {.smaller}\n\n> Exploratory data analysis is a [statistical](https://en.wikipedia.org/wiki/Statistics), approach towards analyzing [data sets](https://en.wikipedia.org/wiki/Data_set) to investigate and summarize their main characteristics, often through [statistical graphics](https://en.wikipedia.org/wiki/Statistical_graphics) and other data visualization methods.\n\n## What is exploratory data analysis? {.smaller}\n\n<div>\n\n::: {.cell execution_count=2}\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-3-output-1.png){width=555 height=555 fig-align='center'}\n:::\n:::\n\n\n</div>\n\n## Examining data {.smaller}\n\n::: panel-tabset\n## Head\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nbirths14.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fage</th>\n      <th>mage</th>\n      <th>mature</th>\n      <th>weeks</th>\n      <th>premie</th>\n      <th>visits</th>\n      <th>gained</th>\n      <th>weight</th>\n      <th>lowbirthweight</th>\n      <th>sex</th>\n      <th>habit</th>\n      <th>marital</th>\n      <th>whitemom</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>34.0</td>\n      <td>34</td>\n      <td>younger mom</td>\n      <td>37</td>\n      <td>full term</td>\n      <td>14.0</td>\n      <td>28.0</td>\n      <td>6.96</td>\n      <td>not low</td>\n      <td>male</td>\n      <td>nonsmoker</td>\n      <td>married</td>\n      <td>white</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>36.0</td>\n      <td>31</td>\n      <td>younger mom</td>\n      <td>41</td>\n      <td>full term</td>\n      <td>12.0</td>\n      <td>41.0</td>\n      <td>8.86</td>\n      <td>not low</td>\n      <td>female</td>\n      <td>nonsmoker</td>\n      <td>married</td>\n      <td>white</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>37.0</td>\n      <td>36</td>\n      <td>mature mom</td>\n      <td>37</td>\n      <td>full term</td>\n      <td>10.0</td>\n      <td>28.0</td>\n      <td>7.51</td>\n      <td>not low</td>\n      <td>female</td>\n      <td>nonsmoker</td>\n      <td>married</td>\n      <td>not white</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>16</td>\n      <td>younger mom</td>\n      <td>38</td>\n      <td>full term</td>\n      <td>NaN</td>\n      <td>29.0</td>\n      <td>6.19</td>\n      <td>not low</td>\n      <td>male</td>\n      <td>nonsmoker</td>\n      <td>not married</td>\n      <td>white</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>32.0</td>\n      <td>31</td>\n      <td>younger mom</td>\n      <td>36</td>\n      <td>premie</td>\n      <td>12.0</td>\n      <td>48.0</td>\n      <td>6.75</td>\n      <td>not low</td>\n      <td>female</td>\n      <td>nonsmoker</td>\n      <td>married</td>\n      <td>white</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Info\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nbirths14.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1000 entries, 0 to 999\nData columns (total 13 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   fage            886 non-null    float64\n 1   mage            1000 non-null   int64  \n 2   mature          1000 non-null   object \n 3   weeks           1000 non-null   int64  \n 4   premie          1000 non-null   object \n 5   visits          944 non-null    float64\n 6   gained          958 non-null    float64\n 7   weight          1000 non-null   float64\n 8   lowbirthweight  1000 non-null   object \n 9   sex             1000 non-null   object \n 10  habit           981 non-null    object \n 11  marital         1000 non-null   object \n 12  whitemom        1000 non-null   object \ndtypes: float64(4), int64(2), object(7)\nmemory usage: 101.7+ KB\n```\n:::\n:::\n\n\n## Describe\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nbirths14.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fage</th>\n      <th>mage</th>\n      <th>weeks</th>\n      <th>visits</th>\n      <th>gained</th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>886.000000</td>\n      <td>1000.000000</td>\n      <td>1000.000000</td>\n      <td>944.000000</td>\n      <td>958.000000</td>\n      <td>1000.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>31.133183</td>\n      <td>28.449000</td>\n      <td>38.666000</td>\n      <td>11.351695</td>\n      <td>30.425887</td>\n      <td>7.198160</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>7.058135</td>\n      <td>5.759737</td>\n      <td>2.564961</td>\n      <td>4.108192</td>\n      <td>15.242527</td>\n      <td>1.306775</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>15.000000</td>\n      <td>14.000000</td>\n      <td>21.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.750000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>26.000000</td>\n      <td>24.000000</td>\n      <td>38.000000</td>\n      <td>9.000000</td>\n      <td>20.000000</td>\n      <td>6.545000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>31.000000</td>\n      <td>28.000000</td>\n      <td>39.000000</td>\n      <td>12.000000</td>\n      <td>30.000000</td>\n      <td>7.310000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>35.000000</td>\n      <td>33.000000</td>\n      <td>40.000000</td>\n      <td>14.000000</td>\n      <td>38.000000</td>\n      <td>8.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>85.000000</td>\n      <td>47.000000</td>\n      <td>46.000000</td>\n      <td>30.000000</td>\n      <td>98.000000</td>\n      <td>10.620000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n::: fragment\n**Always do these first thing after loading in data**\n:::\n\n## Group descriptive statistics {.smaller}\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Example with the premie column\ngroups = births14.groupby('premie').describe().unstack(1)\n\n# Print all rows\nprint(groups.to_string())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               premie   \nfage    count  full term    775.000000\n               premie       111.000000\n        mean   full term     30.967742\n               premie        32.288288\n        std    full term      6.681591\n               premie         9.226826\n        min    full term     15.000000\n               premie        15.000000\n        25%    full term     26.000000\n               premie        27.000000\n        50%    full term     31.000000\n               premie        32.000000\n        75%    full term     35.000000\n               premie        36.000000\n        max    full term     49.000000\n               premie        85.000000\nmage    count  full term    876.000000\n               premie       124.000000\n        mean   full term     28.329909\n               premie        29.290323\n        std    full term      5.721104\n               premie         5.982052\n        min    full term     14.000000\n               premie        16.000000\n        25%    full term     24.000000\n               premie        24.000000\n        50%    full term     28.000000\n               premie        30.000000\n        75%    full term     33.000000\n               premie        34.000000\n        max    full term     44.000000\n               premie        47.000000\nweeks   count  full term    876.000000\n               premie       124.000000\n        mean   full term     39.376712\n               premie        33.645161\n        std    full term      1.469571\n               premie         3.009993\n        min    full term     37.000000\n               premie        21.000000\n        25%    full term     38.000000\n               premie        33.000000\n        50%    full term     39.000000\n               premie        35.000000\n        75%    full term     40.000000\n               premie        36.000000\n        max    full term     46.000000\n               premie        36.000000\nvisits  count  full term    829.000000\n               premie       115.000000\n        mean   full term     11.516285\n               premie        10.165217\n        std    full term      3.884353\n               premie         5.329380\n        min    full term      0.000000\n               premie         0.000000\n        25%    full term     10.000000\n               premie         7.000000\n        50%    full term     12.000000\n               premie        10.000000\n        75%    full term     14.000000\n               premie        12.000000\n        max    full term     30.000000\n               premie        30.000000\ngained  count  full term    839.000000\n               premie       119.000000\n        mean   full term     30.410012\n               premie        30.537815\n        std    full term     15.021661\n               premie        16.785683\n        min    full term      0.000000\n               premie         0.000000\n        25%    full term     20.000000\n               premie        20.000000\n        50%    full term     30.000000\n               premie        29.000000\n        75%    full term     38.000000\n               premie        41.000000\n        max    full term     98.000000\n               premie        85.000000\nweight  count  full term    876.000000\n               premie       124.000000\n        mean   full term      7.434178\n               premie         5.530806\n        std    full term      1.021699\n               premie         1.801182\n        min    full term      3.930000\n               premie         0.750000\n        25%    full term      6.770000\n               premie         4.500000\n        50%    full term      7.440000\n               premie         5.750000\n        75%    full term      8.082500\n               premie         6.572500\n        max    full term     10.620000\n               premie         9.250000\n```\n:::\n:::\n\n\n## Outliers {.smaller}\n\n![](images/outliers.png){fig-align=\"center\" width=\"877\"}\n\n::: fragment\n> Outliers = 1.5 \\* Interquartile range\n:::\n\n## Assess outliers visually {.smaller}\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Change theme to \"white\"\nsns.set_style(\"white\")\n\n# Boxplot of all numerical variables\nsns.boxplot(data = births14, x = 'weight', width = 0.20)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-8-output-1.png){width=763 height=442 fig-align='center'}\n:::\n:::\n\n\n## Find outliers {.smaller}\n\n::: panel-tabset\n## Output\n\n::: {.cell execution_count=8}\n\n::: {.cell-output .cell-output-stdout}\n```\n \nfage q25 = 26.0 q75 = 35.0 IQR = 9.0\nlower, upper: 12.5 48.5\nNumber of Outliers:  7\n \nmage q25 = 24.0 q75 = 33.0 IQR = 9.0\nlower, upper: 10.5 46.5\nNumber of Outliers:  1\n \nweeks q25 = 38.0 q75 = 40.0 IQR = 2.0\nlower, upper: 35.0 43.0\nNumber of Outliers:  72\n \nvisits q25 = 9.0 q75 = 14.0 IQR = 5.0\nlower, upper: 1.5 21.5\nNumber of Outliers:  30\n \ngained q25 = 20.0 q75 = 38.0 IQR = 18.0\nlower, upper: -7.0 65.0\nNumber of Outliers:  26\n \nweight q25 = 6.545 q75 = 8.0 IQR = 1.455\nlower, upper: 4.362 10.183\nNumber of Outliers:  32\n```\n:::\n:::\n\n\n## Code\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Make a copy of the births14 data \ndataCopy = births14.copy()\n\n# Select only numerical columns\ndataRed = dataCopy.select_dtypes(include = np.number)\n\n# List of numerical columns\ndataRedColsList = dataRed.columns[...]\n\n# For all values in the numerical column list from above\nfor i_col in dataRedColsList:\n  # List of the values in i_col\n  dataRed_i = dataRed.loc[:,i_col]\n  \n  # Define the 25th and 75th percentiles\n  q25, q75 = round((dataRed_i.quantile(q = 0.25)), 3), round((dataRed_i.quantile(q = 0.75)), 3)\n  \n  # Define the interquartile range from the 25th and 75th percentiles defined above\n  IQR = round((q75 - q25), 3)\n  \n  # Calculate the outlier cutoff \n  cut_off = IQR * 1.5\n  \n  # Define lower and upper cut-offs\n  lower, upper = round((q25 - cut_off), 3), round((q75 + cut_off), 3)\n  \n  # Print the values\n  print(' ')\n  \n  # For each value of i_col, print the 25th and 75th percentiles and IQR\n  print(i_col, 'q25 =', q25, 'q75 =', q75, 'IQR =', IQR)\n  \n  # Print the lower and upper cut-offs\n  print('lower, upper:', lower, upper)\n\n  # Count the number of outliers outside the (lower, upper) limits, print that value\n  print('Number of Outliers: ', dataRed_i[(dataRed_i < lower) | (dataRed_i > upper)].count())\n```\n:::\n\n\n:::\n\n::: fragment\n-   `q25`: 1/4 quartile, 25th percentile; `q75`: 3/4 quartile, 75th percentile\n\n-   `IQR`: interquartile range, $IQR = q75-q25$\n\n-   `lower`; `upper`: lower, upper limit of $1.5\\times IQR$ used to calculate outliers\n:::\n\n## Remove outliers {.smaller}\n\n::: panel-tabset\n## Cleaning\n\n::: {.cell execution_count=10}\n``` {.python .cell-code code-line-numbers=\"1-14|2|4|6,7,8|10,11|13\"}\n# Select numerical columns\nnumerical_cols = births14.select_dtypes(include = ['number']).columns\n\nfor col in numerical_cols:\n    # Find Q1, Q3, and interquartile range (IQR) for each column\n    Q1 = births14[col].quantile(0.25)\n    Q3 = births14[col].quantile(0.75)\n    IQR = Q3 - Q1\n    # Upper and lower bounds for each column\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    # Filter out the outliers from the DataFrame\n    births14_clean = births14[(births14[col] >= lower_bound) & (births14[col] <= upper_bound)]\n```\n:::\n\n\n## Plot\n\n::: {.cell execution_count=11}\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-12-output-1.png){width=763 height=442 fig-align='center'}\n:::\n:::\n\n\n:::\n\n::: fragment\n#### Why are there still outliers?\n:::\n\n## Missing values (`NaN`)\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Sum of NAs in each column (should be the same, 10% of all)   \nbirths14.isnull().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nfage              114\nmage                0\nmature              0\nweeks               0\npremie              0\nvisits             56\ngained             42\nweight              0\nlowbirthweight      0\nsex                 0\nhabit              19\nmarital             0\nwhitemom            0\ndtype: int64\n```\n:::\n:::\n\n\n## Missing values (`NaN`) visually {.smaller}\n\n::: panel-tabset\n## Bar plot\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nmsno.bar(births14, figsize = (7, 5), fontsize = 10)\nplt.tight_layout()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-14-output-1.png){width=648 height=455 fig-align='center'}\n:::\n:::\n\n\n## Matrix\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nmsno.matrix(births14, figsize = (7, 5), fontsize = 10)\nplt.tight_layout()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-15-output-1.png){width=600 height=478 fig-align='center'}\n:::\n:::\n\n\n:::\n\n## Describe categorical variables {.smaller}\n\n::: panel-tabset\n## Describe\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nbirths14.describe(exclude = [np.number])\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mature</th>\n      <th>premie</th>\n      <th>lowbirthweight</th>\n      <th>sex</th>\n      <th>habit</th>\n      <th>marital</th>\n      <th>whitemom</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1000</td>\n      <td>1000</td>\n      <td>1000</td>\n      <td>1000</td>\n      <td>981</td>\n      <td>1000</td>\n      <td>1000</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>younger mom</td>\n      <td>full term</td>\n      <td>not low</td>\n      <td>male</td>\n      <td>nonsmoker</td>\n      <td>married</td>\n      <td>white</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>841</td>\n      <td>876</td>\n      <td>919</td>\n      <td>505</td>\n      <td>867</td>\n      <td>594</td>\n      <td>765</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Unique levels\n\n::: {.cell execution_count=16}\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis for mature:\n\nUnique Levels: ['younger mom' 'mature mom']\n\nCounts:\n mature\nyounger mom    841\nmature mom     159\nName: count, dtype: int64\n\nProportions:\n mature\nyounger mom    0.841\nmature mom     0.159\nName: proportion, dtype: float64\n\n--------------------------------------------------\n\nAnalysis for premie:\n\nUnique Levels: ['full term' 'premie']\n\nCounts:\n premie\nfull term    876\npremie       124\nName: count, dtype: int64\n\nProportions:\n premie\nfull term    0.876\npremie       0.124\nName: proportion, dtype: float64\n\n--------------------------------------------------\n\nAnalysis for lowbirthweight:\n\nUnique Levels: ['not low' 'low']\n\nCounts:\n lowbirthweight\nnot low    919\nlow         81\nName: count, dtype: int64\n\nProportions:\n lowbirthweight\nnot low    0.919\nlow        0.081\nName: proportion, dtype: float64\n\n--------------------------------------------------\n\nAnalysis for sex:\n\nUnique Levels: ['male' 'female']\n\nCounts:\n sex\nmale      505\nfemale    495\nName: count, dtype: int64\n\nProportions:\n sex\nmale      0.505\nfemale    0.495\nName: proportion, dtype: float64\n\n--------------------------------------------------\n\nAnalysis for habit:\n\nUnique Levels: ['nonsmoker' 'smoker' nan]\n\nCounts:\n habit\nnonsmoker    867\nsmoker       114\nName: count, dtype: int64\n\nProportions:\n habit\nnonsmoker    0.883792\nsmoker       0.116208\nName: proportion, dtype: float64\n\n--------------------------------------------------\n\nAnalysis for marital:\n\nUnique Levels: ['married' 'not married']\n\nCounts:\n marital\nmarried        594\nnot married    406\nName: count, dtype: int64\n\nProportions:\n marital\nmarried        0.594\nnot married    0.406\nName: proportion, dtype: float64\n\n--------------------------------------------------\n\nAnalysis for whitemom:\n\nUnique Levels: ['white' 'not white']\n\nCounts:\n whitemom\nwhite        765\nnot white    235\nName: count, dtype: int64\n\nProportions:\n whitemom\nwhite        0.765\nnot white    0.235\nName: proportion, dtype: float64\n\n--------------------------------------------------\n\n```\n:::\n:::\n\n\n## Code\n\n::: {.cell execution_count=17}\n``` {.python .cell-code code-line-numbers=\"1-26|2|5|8-11|14-17|21-26\"}\n# Select categorical columns\ncategorical_cols = births14.select_dtypes(include = ['object', 'category']).columns\n\n# Initialize a dictionary to store results\ncategory_analysis = {}\n\n# Loop through each categorical column\nfor col in categorical_cols:\n    counts = births14[col].value_counts()\n    proportions = births14[col].value_counts(normalize=True)\n    unique_levels = births14[col].unique()\n    \n    # Store results in dictionary\n    category_analysis[col] = {\n        'Unique Levels': unique_levels,\n        'Counts': counts,\n        'Proportions': proportions\n    }\n\n# Print results\nfor col, data in category_analysis.items():\n    print(f\"Analysis for {col}:\\n\")\n    print(\"Unique Levels:\", data['Unique Levels'])\n    print(\"\\nCounts:\\n\", data['Counts'])\n    print(\"\\nProportions:\\n\", data['Proportions'])\n    print(\"\\n\" + \"-\"*50 + \"\\n\")\n```\n:::\n\n\n:::\n\n## Conditions of normality {.smaller}\n\n::: {.cell execution_count=18}\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-19-output-1.png){width=676 height=390 fig-align='center'}\n:::\n:::\n\n\n::: fragment\n::: incremental\n-   **Histogram**: bell-shaped curve\n\n-   **Skewness**: Close to 0 for symmetry; **Kurtosis**: Close to 3 for normal \"tailedness.\"\n\n-   **Sample Size**: Larger samples are less sensitive to non-normality.\n\n-   **Empirical Rule**: 68-95-99.7% rule (data within 1, 2, and 3 st dev. of the mean).\n:::\n:::\n\n## Skewness {.smaller}\n\n::: {.cell execution_count=19}\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-20-output-1.png){width=968 height=391 fig-align='center'}\n:::\n:::\n\n\n::: fragment\n::: incremental\n-   Several definitions\n-   Sensitive to outliers\n-   Designed for one peak (*unimodal*)\n-   Mean and median are inconclusive from skew alone\n:::\n:::\n\n## Kurtosis {.smaller}\n\n::: {.cell execution_count=20}\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-21-output-1.png){width=825 height=442 fig-align='center'}\n:::\n:::\n\n\n::: fragment\n::: incremental\n-   Several definitions...\n-   Sensitive to outliers\n-   Designed for one peak (*unimodal*)\n:::\n:::\n\n## Q-Q plot {.smaller}\n\n\n\n::: panel-tabset\n## Normal\n\n::: {.cell fig.asp='0.618' fig.width='10' execution_count=22}\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-23-output-1.png){width=820 height=442 fig-align='center'}\n:::\n:::\n\n\n## Negative skew\n\n::: {.cell fig.asp='0.618' fig.width='10' execution_count=23}\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-24-output-1.png){width=836 height=442 fig-align='center'}\n:::\n:::\n\n\n## Positive skew\n\n::: {.cell fig.asp='0.618' fig.width='10' execution_count=24}\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-25-output-1.png){width=836 height=442 fig-align='center'}\n:::\n:::\n\n\n:::\n\n## Testing normality: data shape {.smaller}\n\n::: panel-tabset\n## One column\n\n::: {.cell execution_count=25}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-24|2,5|8|11|14|17,18|21-24\"}\n# Change theme to \"white\"\nsns.set_style(\"white\")\n\n# Make a copy of the data \ndataCopy = births14.copy()\n\n# Remove NAs\ndataCopyFin = dataCopy.dropna()\n\n# Specify desired column\ni_col = dataCopyFin.weight\n\n# Subplots\nfig, (ax1, ax2) = plt.subplots(ncols = 2, nrows = 1)\n\n# Density plot\nsns.kdeplot(i_col, linewidth = 5, ax = ax1)\nax1.set_title('Newborn Weight Density plot')\n\n# Q-Q plot\nsm.qqplot(i_col, line='s', ax = ax2)\nax2.set_title('Newborn Weight Q-Q plot')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-26-output-1.png){width=935 height=453 fig-align='center'}\n:::\n:::\n\n\n::: fragment\n**Positive-skew (left-tailed)**\n:::\n\n## Multiple columns\n\n::: {.cell execution_count=26}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-24|2|5,8|11,13|16,17|20,21|23,24\"}\n# Change theme to \"white\"\nsns.set_style(\"white\")\n\n# Make a copy of the data \ndataCopy = births14.copy()\n\n# Select only numerical columns\ndataRed = dataCopyFin.select_dtypes(include=np.number)\n\n# Fill the subplots\nfor k in dataRed.columns:\n    # Create a figure with two subplots\n    fig, (ax1, ax2) = plt.subplots(ncols = 2, nrows = 1)\n    \n    # Density plot\n    sns.kdeplot(dataRed[k], linewidth = 5, ax = ax1)\n    ax1.set_title(f'{k} Density Plot')\n    \n    # Q-Q plot\n    sm.qqplot(dataRed[k], line = 's', ax = ax2)\n    ax2.set_title(f'{k} QQ Plot')\n\n    plt.tight_layout()\n    plt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-27-output-1.png){width=935 height=453 fig-align='center'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-27-output-2.png){width=935 height=453 fig-align='center'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-27-output-3.png){width=935 height=453 fig-align='center'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-27-output-4.png){width=935 height=453 fig-align='center'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-27-output-5.png){width=935 height=453 fig-align='center'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-27-output-6.png){width=935 height=453 fig-align='center'}\n:::\n:::\n\n\n:::\n\n## Conclusions\n\n::: incremental\n-   Inspect all data immediately\n\n-   Assess outliers and missing values\n\n-   Assess normality\n\n-   Make corrections as needed (**more next time**)\n:::\n\n# Exploratory plotting\n\n## Data visualization\n\n> The practice of [designing](https://en.wikipedia.org/wiki/Design \"Design\") and creating easy-to-communicate and easy-to-understand [graphic](https://en.wikipedia.org/wiki/Graphics \"Graphics\") or visual [representations](https://en.wikipedia.org/wiki/Representation_(arts) \"Representation (arts)\") of a large amount of complex quantitative and qualitative [data](https://en.wikipedia.org/wiki/Data \"Data\") and [information](https://en.wikipedia.org/wiki/Information \"Information\") with the help of static, dynamic or interactive visual items.\n\n::: fragment\nMy definition: telling a story with your data, visually.\n:::\n\n## Why storytelling? {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/gilgamesh-1.png){fig-align=\"center\" width=\"678\"}\n:::\n\n::: {.column width=\"50%\"}\n![](images/gilgamesh-2.jpeg){fig-align=\"center\" width=\"266\"}\n:::\n:::\n\n::: fragment\n::: incremental\n-   **Epic of Gilgamesh** (c. 2100 BC)\n\n-   First known \"hero's journey\"\n\n-   **Goal**: Apply storytelling to your visuals\n:::\n:::\n\n## **Aircraft-Wildlife Collisions**\n\n::: columns\n::: {.column width=\"50%\"}\n<br>\n\n![](images/plane-birds.jpeg){fig-align=\"center\"}\n:::\n\n::: {.column width=\"50%\"}\n![](images/plane-birds-1.webp){fig-align=\"center\" width=\"450\"}\n:::\n:::\n\n## Aircraft-Wildlife Collisions {.smaller}\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nbirds = pd.read_csv(\"data/birds.csv\")\nbirds['date'] = pd.to_datetime(birds['date'])\n```\n:::\n\n\n::: panel-tabset\n## Head\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nbirds.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>opid</th>\n      <th>operator</th>\n      <th>atype</th>\n      <th>remarks</th>\n      <th>phase_of_flt</th>\n      <th>ac_mass</th>\n      <th>num_engs</th>\n      <th>date</th>\n      <th>time_of_day</th>\n      <th>state</th>\n      <th>height</th>\n      <th>speed</th>\n      <th>effect</th>\n      <th>sky</th>\n      <th>species</th>\n      <th>birds_seen</th>\n      <th>birds_struck</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AAL</td>\n      <td>AMERICAN AIRLINES</td>\n      <td>MD-80</td>\n      <td>NO DAMAGE</td>\n      <td>Descent</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>1990-09-30</td>\n      <td>Night</td>\n      <td>IL</td>\n      <td>7000.0</td>\n      <td>250.0</td>\n      <td>NaN</td>\n      <td>No Cloud</td>\n      <td>UNKNOWN BIRD - MEDIUM</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>USA</td>\n      <td>US AIRWAYS</td>\n      <td>FK-28-4000</td>\n      <td>2 BIRDS, NO DAMAGE.</td>\n      <td>Climb</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>1993-11-29</td>\n      <td>Day</td>\n      <td>MD</td>\n      <td>10.0</td>\n      <td>140.0</td>\n      <td>NaN</td>\n      <td>No Cloud</td>\n      <td>UNKNOWN BIRD - MEDIUM</td>\n      <td>10-Feb</td>\n      <td>10-Feb</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>AAL</td>\n      <td>AMERICAN AIRLINES</td>\n      <td>B-727-200</td>\n      <td>NaN</td>\n      <td>Approach</td>\n      <td>4.0</td>\n      <td>3.0</td>\n      <td>1993-08-13</td>\n      <td>Day</td>\n      <td>TN</td>\n      <td>400.0</td>\n      <td>140.0</td>\n      <td>NaN</td>\n      <td>Some Cloud</td>\n      <td>UNKNOWN BIRD - SMALL</td>\n      <td>10-Feb</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>AAL</td>\n      <td>AMERICAN AIRLINES</td>\n      <td>MD-82</td>\n      <td>NaN</td>\n      <td>Climb</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>1993-10-07</td>\n      <td>Day</td>\n      <td>VA</td>\n      <td>100.0</td>\n      <td>200.0</td>\n      <td>NaN</td>\n      <td>Overcast</td>\n      <td>UNKNOWN BIRD - SMALL</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>AAL</td>\n      <td>AMERICAN AIRLINES</td>\n      <td>MD-82</td>\n      <td>NO DAMAGE</td>\n      <td>Climb</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>1993-09-25</td>\n      <td>Day</td>\n      <td>SC</td>\n      <td>50.0</td>\n      <td>170.0</td>\n      <td>NaN</td>\n      <td>Some Cloud</td>\n      <td>UNKNOWN BIRD - SMALL</td>\n      <td>10-Feb</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Info\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nbirds.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 19302 entries, 0 to 19301\nData columns (total 17 columns):\n #   Column        Non-Null Count  Dtype         \n---  ------        --------------  -----         \n 0   opid          19302 non-null  object        \n 1   operator      19302 non-null  object        \n 2   atype         19302 non-null  object        \n 3   remarks       16516 non-null  object        \n 4   phase_of_flt  17519 non-null  object        \n 5   ac_mass       18018 non-null  float64       \n 6   num_engs      17995 non-null  float64       \n 7   date          19302 non-null  datetime64[ns]\n 8   time_of_day   17225 non-null  object        \n 9   state         18431 non-null  object        \n 10  height        16109 non-null  float64       \n 11  speed         12294 non-null  float64       \n 12  effect        1973 non-null   object        \n 13  sky           15723 non-null  object        \n 14  species       19302 non-null  object        \n 15  birds_seen    4764 non-null   object        \n 16  birds_struck  19263 non-null  object        \ndtypes: datetime64[ns](1), float64(4), object(12)\nmemory usage: 2.5+ MB\n```\n:::\n:::\n\n\n## Describe\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nbirds.describe().round(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ac_mass</th>\n      <th>num_engs</th>\n      <th>date</th>\n      <th>height</th>\n      <th>speed</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>18018.00</td>\n      <td>17995.00</td>\n      <td>19302</td>\n      <td>16109.00</td>\n      <td>12294.00</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>3.36</td>\n      <td>2.10</td>\n      <td>1994-08-25 09:46:40.994715520</td>\n      <td>754.68</td>\n      <td>136.10</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.00</td>\n      <td>1.00</td>\n      <td>1990-01-08 00:00:00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>3.00</td>\n      <td>2.00</td>\n      <td>1992-08-18 00:00:00</td>\n      <td>0.00</td>\n      <td>110.00</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>4.00</td>\n      <td>2.00</td>\n      <td>1994-10-01 00:00:00</td>\n      <td>40.00</td>\n      <td>130.00</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>4.00</td>\n      <td>2.00</td>\n      <td>1996-09-13 18:00:00</td>\n      <td>500.00</td>\n      <td>150.00</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>5.00</td>\n      <td>4.00</td>\n      <td>1999-10-16 00:00:00</td>\n      <td>32500.00</td>\n      <td>400.00</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.01</td>\n      <td>0.57</td>\n      <td>NaN</td>\n      <td>1795.81</td>\n      <td>44.64</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n## [{seaborn}](https://seaborn.pydata.org/index.html)\n\n> Seaborn is a Python data visualization library based on [matplotlib](https://matplotlib.org/). It provides a high-level interface for drawing attractive and informative statistical graphics.\n\n![](images/seaborn.png){fig-align=\"center\"}\n\n## Some data viz rules\n\n::: incremental\n-   ALWAYS make custom titles (axes, legends)\n\n-   Use color blind friendly [color palettes](https://seaborn.pydata.org/tutorial/color_palettes.html)\n\n-   Use either the `whitegrid` or `white` [themes](https://seaborn.pydata.org/tutorial/aesthetics.html)\n\n-   Don't clutter with unnecessary information\n\n-   Use annotations to aid the reader\n\n-   Use the **Golden Ratio**: 0.625, or 8in/5in\n:::\n\n# Exploratory visuals\n\n## How to choose a plot\n\n::: {style=\"text-align: center;\"}\n\n```{=html}\n<iframe width=\"1000\" height=\"500\" src=\"https://www.data-to-viz.com/\" frameborder=\"1\" style=\"background:white;\"></iframe>\n```\n\n:::\n\n## One Numeric Variable\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: center;\"}\n**Histogram**\n\n![](images/Histogram.png){fig-align=\"center\" width=\"75\"}\n\n::: fragment\n::: {.incremental style=\"text-align: left;\"}\n-   Frequency Distribution\n-   Easy to Interpret\n-   Identifies Patterns\n:::\n:::\n:::\n\n::: {.column width=\"50%\" style=\"text-align: center;\"}\n**Density Plot**\n\n![](images/Density.png){fig-align=\"center\" width=\"75\"}\n\n::: fragment\n::: {.incremental style=\"text-align: left;\"}\n-   Smooth Distribution Curve\n-   Highlights Density\n-   Comparative Analysis\n:::\n:::\n:::\n:::\n\n## Histograms {.smaller}\n\n::: {.cell execution_count=31}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-6|1,2|4,6\"}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.displot(data = birds, x = \"speed\")\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-32-output-1.png){width=455 height=454}\n:::\n:::\n\n\n## Histograms: bins {.smaller}\n\n::: {.cell execution_count=32}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-4|2\"}\nsns.displot(data = birds, x = \"speed\", \n            bins = 15, height = 5, aspect = 8/5)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-33-output-1.png){width=743 height=454}\n:::\n:::\n\n\n## Density Plot {.smaller}\n\n::: {.cell execution_count=33}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-4|2\"}\nsns.displot(data = birds, x = \"speed\", \n            kind = 'kde', height = 5, aspect = 8/5)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-34-output-1.png){width=743 height=454}\n:::\n:::\n\n\n## Two Numeric Variables\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: center;\"}\n**Scatterplot**\n\n![](images/ScatterPlot.png){fig-align=\"center\" width=\"100\"}\n\n::: fragment\n::: {.incremental style=\"text-align: left;\"}\n-   Relationship Visualization\n-   Outlier Identification\n-   Pattern Recognition\n:::\n:::\n:::\n\n::: {.column width=\"50%\" style=\"text-align: center;\"}\n**2D Density Plot**\n\n![](images/2dDensity.png){fig-align=\"center\" width=\"100\"}\n\n::: fragment\n::: {.incremental style=\"text-align: left;\"}\n-   Density Distributions\n-   Combine Contour and Color\n-   Complex Data Interpretation\n:::\n:::\n:::\n:::\n\n## Scatterplots {.smaller}\n\n::: {.cell execution_count=34}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-5|3\"}\nsns.set_theme(style = \"whitegrid\")\n\nsns.scatterplot(data = birds, x = \"speed\", y = \"height\")\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-35-output-1.png){width=837 height=435}\n:::\n:::\n\n\n## Scatterplots - color {.smaller}\n\n::: {.cell execution_count=35}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-6|4\"}\nsns.set_theme(style = \"whitegrid\")\n\nsns.scatterplot(data = birds, x = \"speed\", y = \"height\",\n                hue = \"sky\")\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-36-output-1.png){width=837 height=435}\n:::\n:::\n\n\n## Scatterplots - size + color {.smaller}\n\n::: {.cell execution_count=36}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-6|4\"}\nsns.set_theme(style = \"whitegrid\")\n\nsns.scatterplot(data = birds, x = \"speed\", y = \"height\",\n                size = \"num_engs\", hue = \"ac_mass\")\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-37-output-1.png){width=837 height=435}\n:::\n:::\n\n\n## Scatterplots - linear relationships {.smaller}\n\n::: {.cell execution_count=37}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-4|1\"}\nsns.lmplot(data = birds, x = \"speed\", y = \"height\",\n           aspect = 8/5)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-38-output-1.png){width=752 height=464}\n:::\n:::\n\n\n## Scatterplots - grouped relationships {.smaller}\n\n::: {.cell execution_count=38}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-4|1\"}\nsns.lmplot(data = birds, x = \"speed\", y = \"height\",\n           hue = \"num_engs\", aspect = 8/5)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-39-output-1.png){width=839 height=464}\n:::\n:::\n\n\n## 2D Density Plots {.smaller}\n\n::: {.cell execution_count=39}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-4|2\"}\nsns.histplot(data = birds, x = \"speed\", y = \"height\", \n             bins = 50, pthresh = 0.1, cmap = \"mako\")\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-40-output-1.png){width=837 height=435}\n:::\n:::\n\n\n## 2D Density plots: contours {.smaller}\n\n::: {.cell execution_count=40}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-4|1,2\"}\nsns.kdeplot(data = birds, x = \"speed\", y = np.log(birds['height'] + 1), \n             thresh = 0.1, hue = \"sky\", palette = \"colorblind\")\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-41-output-1.png){width=812 height=435}\n:::\n:::\n\n\n## 2D Density plots: filled contours {.smaller}\n\n::: {.cell execution_count=41}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-4|1,2\"}\nsns.kdeplot(data = birds, x = \"speed\", y = np.log(birds['height'] + 1), \n             thresh = 0, cmap = \"mako\", fill = True, levels = 10)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-42-output-1.png){width=812 height=439}\n:::\n:::\n\n\n## Two Ordered Numeric Variables\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: center;\"}\n**Line Plot**\n\n![](images/Line.png){fig-align=\"center\" width=\"100\"}\n\n::: fragment\n::: {.incremental style=\"text-align: left;\"}\n-   Trend Identification\n-   Simple and Clear\n-   Comparative Analysis\n:::\n:::\n:::\n\n::: {.column width=\"50%\" style=\"text-align: center;\"}\n**Area Plot**\n\n![](images/Area.png){fig-align=\"center\" width=\"100\"}\n\n::: fragment\n::: {.incremental style=\"text-align: left;\"}\n-   Cumulative Representation\n-   Emphasizes Volume\n-   Layered Comparisons\n:::\n:::\n:::\n:::\n\n## Line Plot {.smaller}\n\n::: {.cell execution_count=42}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-6|3\"}\nsns.set_theme(style = \"whitegrid\")\n\nsns.lineplot(data = birds, x = \"date\", y = \"speed\")\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-43-output-1.png){width=820 height=435}\n:::\n:::\n\n\n## Line Plot: grouped lines\n\n::: {.cell execution_count=43}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-4|2\"}\nsns.lineplot(data = birds, x = \"date\", y = \"speed\",\n             hue = \"sky\")\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-44-output-1.png){width=820 height=435}\n:::\n:::\n\n\n## One Categorical\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: center;\"}\n**Barplot**\n\n![](images/Bar.png){fig-align=\"center\" width=\"100\"}\n\n::: fragment\n::: {.incremental style=\"text-align: left;\"}\n-   Categorical Comparison\n-   Clear Visualization\n-   Versatile Use\n:::\n:::\n:::\n\n::: {.column width=\"50%\" style=\"text-align: center;\"}\n**Pie Chart**\n\n![](images/Pie.png){fig-align=\"center\" width=\"100\"}\n\n::: fragment\n::: {.incremental style=\"text-align: left;\"}\n-   Proportional Representation\n-   Simple Interpretation\n-   Visual Appeal\n:::\n:::\n:::\n:::\n\n## Barplot {.smaller}\n\n::: {.cell execution_count=44}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-6|3\"}\nsns.set_theme(style = \"white\")\n\nsns.countplot(data = birds, x = \"sky\", \n              palette = \"colorblind\")\n              \nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-45-output-1.png){width=829 height=435}\n:::\n:::\n\n\n## Pie Chart {.smaller}\n\nCan't use {seaborn}\n\n::: {.cell execution_count=45}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-9|1|3-5|7\"}\ncategory_counts = birds['sky'].value_counts()\n\nplt.pie(category_counts, labels = category_counts.index, \n        autopct = lambda p: f'{p:.1f}%', \n        textprops = {'size':14})\n\nplt.axis('equal')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-46-output-1.png){width=763 height=395}\n:::\n:::\n\n\n## One Numerical + One Categorical\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: center;\"}\n**Boxplot**\n\n![](images/box.png){fig-align=\"center\" width=\"100\"}\n\n::: fragment\n::: {.incremental style=\"text-align: left;\"}\n-   Displays Quartiles\n-   Identifies Outliers\n-   Comparative Analysis\n:::\n:::\n:::\n\n::: {.column width=\"50%\" style=\"text-align: center;\"}\n**Violin chart**\n\n![](images/Violin.png){fig-align=\"center\" width=\"100\"}\n\n::: fragment\n::: {.incremental style=\"text-align: left;\"}\n-   Density Representation\n-   Richer Data Insight\n-   Visualizes Data Spread\n:::\n:::\n:::\n:::\n\n## Boxplots {.smaller}\n\n::: {.cell execution_count=46}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-6|1|3,4\"}\nsns.set_style(\"whitegrid\")\n\nsns.boxplot(data = birds, x = \"speed\", y = \"sky\",\n            hue = \"sky\", palette = \"colorblind\")\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-47-output-1.png){width=877 height=435}\n:::\n:::\n\n\n## Trim axes {.smaller}\n\n::: {.cell execution_count=47}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-8|6\"}\nsns.set_style(\"whitegrid\")\n\np1 = sns.boxplot(data = birds, x = \"speed\", y = \"sky\",\n                 hue = \"sky\", palette = \"colorblind\")\n\np1.set_xlim(0, 250)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-48-output-1.png){width=889 height=435}\n:::\n:::\n\n\n## Violin Plots {.smaller}\n\n::: {.cell execution_count=48}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-6|3,4\"}\nsns.set_style(\"white\")\n\nsns.violinplot(data = birds, x = \"speed\", y = \"sky\", hue = \"sky\",\n                    palette = \"colorblind\")\n               \nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-49-output-1.png){width=877 height=435}\n:::\n:::\n\n\n## Violin Plots: paired {.smaller}\n\n::: {.cell execution_count=49}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-10|3,5|7\"}\nsns.set_style(\"white\")\n\noptions = ['Night', 'Day']\n\nbirds_filt = birds[birds['time_of_day'].isin(options)]\n\nsns.violinplot(data = birds_filt, x = \"speed\", y = \"sky\", hue = \"time_of_day\",\n                    palette = \"colorblind\")\n               \nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-50-output-1.png){width=877 height=435}\n:::\n:::\n\n\n## Violin Plots: quartiles + split {.smaller}\n\n::: {.cell execution_count=50}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-7|5\"}\nsns.set_style(\"white\")\n\nsns.violinplot(data = birds_filt, x = \"speed\", y = \"sky\", hue = \"time_of_day\",\n                    palette = \"colorblind\",\n                    inner = \"quart\", split = True)\n               \nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-51-output-1.png){width=877 height=435}\n:::\n:::\n\n\n## Cleaning up our plots {.smaller}\n\n#### **My minimum expectation:**\n\n::: {.cell execution_count=51}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-11|6-9\"}\nsns.set_style(\"white\")\n\ng1 = sns.violinplot(data = birds_filt, x = \"speed\", y = \"sky\", hue = \"time_of_day\",\n                    palette = \"colorblind\")\n\ng1.set(xlabel = \"Speed (mph)\")\ng1.set(ylabel = None)\ng1.set(title = \"Speed of plane collisions with birds\")\ng1.legend(title = \"Time of day\")\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-52-output-1.png){width=857 height=455}\n:::\n:::\n\n\n## Aside: Correlations {.smaller}\n\n::: {.cell execution_count=52}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-16|3|5|7|9,11|13,14\"}\nsns.set_theme(style = \"white\")\n\nbirds_num = birds.select_dtypes(include = 'number')\n\ncorr = birds_num.corr()\n\nmask = np.triu(np.ones_like(corr, dtype = bool))\n\nf, ax = plt.subplots(figsize = (8, 6))\n\ncmap = sns.diverging_palette(230, 20, as_cmap = True)\n\nsns.heatmap(corr, mask = mask, cmap = cmap, vmax = 0.5, center = 0,\n            square = True, linewidths = .5, cbar_kws = {\"shrink\": 0.5})\n            \nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-53-output-1.png){width=563 height=489}\n:::\n:::\n\n\n## Lastly: Pairgrids {.smaller}\n\n::: {.cell execution_count=53}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-11|3|5-9|\"}\nsns.set_theme(style = \"white\")\n\nbirds_sub = birds[['ac_mass', 'height', 'speed', 'sky']]\n\ng = sns.PairGrid(birds_sub, diag_sharey = False, \n                 height = 2, hue = \"sky\")\ng.map_upper(sns.scatterplot, s = 15)\ng.map_lower(sns.kdeplot)\ng.map_diag(sns.kdeplot, lw = 2)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03-eda_files/figure-revealjs/cell-54-output-1.png){width=569 height=562}\n:::\n:::\n\n\n## Diwali sales data: metadata {.smaller}\n\n| **variable**     | **class** | **description**                               |\n|------------------|-----------|-----------------------------------------------|\n| User_ID          | double    | User identification number                    |\n| Cust_name        | character | Customer name                                 |\n| Product_ID       | character | Product identification number                 |\n| Gender           | character | Gender of the customer (e.g. Male, Female)    |\n| Age Group        | character | Age group of the customer                     |\n| Age              | double    | Age of the customer                           |\n| Marital_Status   | double    | Marital status of customer (Married, Single)  |\n| State            | character | State of the customer                         |\n| Zone             | character | Geographic zone of the customer               |\n| Occupation       | character | Occupation of the customer                    |\n| Product_Category | character | Category of the product                       |\n| Orders           | double    | Number of orders made by the customer         |\n| Amount           | double    | Amount in Indian rupees spent by the customer |\n\n## Livecoding: Diwali sales data {.smaller}\n\n::: panel-tabset\n## Read in\n\n::: {.cell execution_count=54}\n``` {.python .cell-code}\ndiwali = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-11-14/diwali_sales_data.csv', encoding = 'iso-8859-1')\ndiwali.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>User_ID</th>\n      <th>Cust_name</th>\n      <th>Product_ID</th>\n      <th>Gender</th>\n      <th>Age Group</th>\n      <th>Age</th>\n      <th>Marital_Status</th>\n      <th>State</th>\n      <th>Zone</th>\n      <th>Occupation</th>\n      <th>Product_Category</th>\n      <th>Orders</th>\n      <th>Amount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1002903</td>\n      <td>Sanskriti</td>\n      <td>P00125942</td>\n      <td>F</td>\n      <td>26-35</td>\n      <td>28</td>\n      <td>0</td>\n      <td>Maharashtra</td>\n      <td>Western</td>\n      <td>Healthcare</td>\n      <td>Auto</td>\n      <td>1</td>\n      <td>23952.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1000732</td>\n      <td>Kartik</td>\n      <td>P00110942</td>\n      <td>F</td>\n      <td>26-35</td>\n      <td>35</td>\n      <td>1</td>\n      <td>Andhra Pradesh</td>\n      <td>Southern</td>\n      <td>Govt</td>\n      <td>Auto</td>\n      <td>3</td>\n      <td>23934.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1001990</td>\n      <td>Bindu</td>\n      <td>P00118542</td>\n      <td>F</td>\n      <td>26-35</td>\n      <td>35</td>\n      <td>1</td>\n      <td>Uttar Pradesh</td>\n      <td>Central</td>\n      <td>Automobile</td>\n      <td>Auto</td>\n      <td>3</td>\n      <td>23924.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1001425</td>\n      <td>Sudevi</td>\n      <td>P00237842</td>\n      <td>M</td>\n      <td>0-17</td>\n      <td>16</td>\n      <td>0</td>\n      <td>Karnataka</td>\n      <td>Southern</td>\n      <td>Construction</td>\n      <td>Auto</td>\n      <td>2</td>\n      <td>23912.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1000588</td>\n      <td>Joni</td>\n      <td>P00057942</td>\n      <td>M</td>\n      <td>26-35</td>\n      <td>28</td>\n      <td>1</td>\n      <td>Gujarat</td>\n      <td>Western</td>\n      <td>Food Processing</td>\n      <td>Auto</td>\n      <td>2</td>\n      <td>23877.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Code\n\n::: {.cell execution_count=55}\n``` {.python .cell-code code-fold=\"true\"}\n# Examine data\ndiwali.info()\n\n# Data types\ndiwali.dtypes\n\n# Describe numerical columns\ndiwali.describe()\n\n# Describe categories\ndiwali.describe(exclude = [np.number])\n\n# Unique levels\ncategorical_cols = diwali.select_dtypes(include = ['object', 'category']).columns\nunique_levels = diwali[col].unique()\n\n# Outliers\n# Make a copy of the diwali data \ndataCopy = diwali.copy()\n\n# Select only numerical columns\ndataRed = dataCopy.select_dtypes(include = np.number)\n\n# List of numerical columns\ndataRedColsList = dataRed.columns[...]\n\n# For all values in the numerical column list from above\nfor i_col in dataRedColsList:\n  # List of the values in i_col\n  dataRed_i = dataRed.loc[:,i_col]\n  \n  # Define the 25th and 75th percentiles\n  q25, q75 = round((dataRed_i.quantile(q = 0.25)), 3), round((dataRed_i.quantile(q = 0.75)), 3)\n  \n  # Define the interquartile range from the 25th and 75th percentiles defined above\n  IQR = round((q75 - q25), 3)\n  \n  # Calculate the outlier cutoff \n  cut_off = IQR * 1.5\n  \n  # Define lower and upper cut-offs\n  lower, upper = round((q25 - cut_off), 3), round((q75 + cut_off), 3)\n  \n  # Print the values\n  print(' ')\n  \n  # For each value of i_col, print the 25th and 75th percentiles and IQR\n  print(i_col, 'q25 =', q25, 'q75 =', q75, 'IQR =', IQR)\n  \n  # Print the lower and upper cut-offs\n  print('lower, upper:', lower, upper)\n\n  # Count the number of outliers outside the (lower, upper) limits, print that value\n  print('Number of Outliers: ', dataRed_i[(dataRed_i < lower) | (dataRed_i > upper)].count())\n\n# Missing values\ndiwali.isnull().sum()\n\n# Normality - qq plot\n# Change theme to \"white\"\nsns.set_style(\"white\")\n\n# Make a copy of the data \ndataCopy = diwali.copy()\n\n# Remove NAs\ndataCopyFin = dataCopy.dropna()\n\n# Specify desired column\ni_col = dataCopyFin.Amount\n\n# Subplots\nfig, (ax1, ax2) = plt.subplots(ncols = 2, nrows = 1)\n\n# Density plot\nsns.kdeplot(i_col, linewidth = 5, ax = ax1)\nax1.set_title('Amount spent (₹)')\n\n# Q-Q plot\nsm.qqplot(i_col, line = 's', ax = ax2)\nax2.set_title('Amount spent Q-Q plot')\nplt.tight_layout()\nplt.show()\n```\n:::\n\n\n:::\n\n",
    "supporting": [
      "03-eda_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}